return {
  {
    'NTBBloodbath/sweetie.nvim',
    lazy = false,
    priority = 1000,
    config = function()
      vim.cmd('colorscheme sweetie')
      vim.fn.sign_define('DiagnosticSignError', { text = 'ü§£', texthl = 'DiagnosticSignError' })
      vim.fn.sign_define('DiagnosticSignWarn', { text = 'üßê', texthl = 'DiagnosticSignWarn' })
      vim.fn.sign_define('DiagnosticSignInfo', { text = 'ü´†', texthl = 'DiagnosticSignInfo' })
      vim.fn.sign_define('DiagnosticSignHint', { text = 'ü§î', texthl = 'DiagnosticSignHint' })
    end,
  },
  {
    "nvim-tree/nvim-tree.lua",
    version = "*",
    lazy = false,
    dependencies = { "nvim-tree/nvim-web-devicons" },
    config = function()
      require("nvim-tree").setup({
        git = {
          enable = false,
        },
      })
    end,
    keys = {
      { "<leader>t", ":NvimTreeToggle<CR>", desc = "Toggle Nvimtree state" },
    },
  },
  -- lualine --
  {
    "nvim-lualine/lualine.nvim",
    dependencies = { "nvim-tree/nvim-web-devicons" },
    config = function()
      require("lualine").setup({
        sections = {
          lualine_c = {
            {
              "filename",
              path = 1,
            },
          },
        },
      })
    end,
    opts = {
      theme = "dracula",
    },
  },
  -- rainbow bracket --
  {
    'HiPhish/rainbow-delimiters.nvim',
    lazy = true,
    event = 'BufRead',
    config = function()
      local rainbow_delimiters = require('rainbow-delimiters')
      vim.g.rainbow_delimiters = {
        strategy = {
          [''] = rainbow_delimiters.strategy['global'],
          vim = rainbow_delimiters.strategy['local'],
        },
        query = {
          [''] = 'rainbow-delimiters',
          lua = 'rainbow-blocks',
        },
        highlight = {
          'RainbowDelimiterBlue',
          'RainbowDelimiterYellow',
          'RainbowDelimiterCyan',
          'RainbowDelimiterViolet',
          'RainbowDelimiterRed',
          'RainbowDelimiterOrange',
          'RainbowDelimiterGreen',
        },
      }
    end
  },
  {
    "glepnir/dashboard-nvim",
    event = "VimEnter",
    dependencies = { { "nvim-tree/nvim-web-devicons" } },
    config = function()
      require("dashboard").setup({
        config = {
          header = {
            "          ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚£Ä‚£ô‚£Ü‚†Ä‚†à‚¢≥‚°Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä",
            "    ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚£§‚†∂‚†ü‚†õ‚†â‚†Å‚†â‚†õ‚†É‚†Ä‚†à‚£ø‚†ª‚†∑‚†∂‚£¶‚£§‚£Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä     ",
            "    ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚£¥‚†ü‚†â‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚°Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†ô‚¢ø‚£¶‚£Ñ‚£Ä‚£§‚£Ä‚£Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä     ",
            "    ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚†æ‚†ã‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚¢ø‚£ø‚°â‚¢π‚£ø‚£ø‚£ø‚£∑‚£∂‚£∂‚£§‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä     ",
            "    ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚°æ‚†ã‚†Ä‚£º‚†É‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢ª‚°Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚£ø‚£ß‚†Ä‚¢©‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä     ",
            "    ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£¥‚†è‚†Ä‚†Ä‚¢∏‚°è‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚£ß‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚†Ä‚†ò‚£ø‚£∑‚°Ä‚¢â‚£ø‚£ø‚£ø‚£ø‚°è‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä     ",
            "    ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚£æ‚†É‚†Ä‚†Ä‚†Ä‚£ø‚†É‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Å‚†Ä‚†Ä‚£ø‚†Ä‚†Ä‚†Ä‚¢π‚£á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚£á‚†Ä‚†ò‚¢ø‚£∑‚°â‚†â‚£ø‚£ø‚£ø‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä     ",
            "    ‚†Ä‚†Ä‚£Ä‚£†‚£¥‚£æ‚°ø‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∞‚°á‚†Ä‚†Ä‚†∏‚£á‚†Ä‚†Ä‚†Ä‚¢ª‚°Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢ª‚°Ä‚†Ä‚†à‚†ª‚£ø‚£Æ‚°â‚¢π‚°è‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä     ",
            "    ‚¢∞‚£ø‚£ø‚£ø‚£ø‚£ø‚†Å‚†Ä‚¢Ä‚†Ä‚†Å‚†Ä‚¢ª‚°Ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚£ß‚†Ä‚†Ä‚†Ä‚¢ª‚°Ñ‚†Ä‚†Ä‚†Ä‚¢ø‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†∏‚°á‚†Ä‚†Ä‚†Ä‚†ò‚°ø‚£ø‚£ø‚£∑‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä     ",
            "    ‚†ò‚£ø‚£ø‚£ø‚£ø‚†á‚†Ä‚†Ä‚£æ‚†Ä‚†Ä‚†Ä‚¢∏‚£ß‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚£ø‚£¶‚†Ä‚†Ä‚†à‚¢ø‚£Ñ‚†Ä‚†Ä‚†à‚¢∑‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£∑‚†Ä‚†Ä‚†Ä‚†Ä‚¢∑‚°Ä‚†ô‚¢ø‚£∑‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä     ",
            "    ‚†Ä‚¢ª‚£ø‚£ø‚°è‚†Ä‚¢†‚°Ä‚¢ª‚†Ä‚†Ä‚†Ä‚¢∏‚£ø‚£¶‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢ø‚°â‚¢∑‚°Ñ‚†Ä‚†ò‚¢ø‚£¶‚°Ä‚†Ä‚†à‚¢∑‚°Ä‚†Ä‚†Ä‚†Ä‚¢ª‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚£ß‚†Ä‚†à‚¢ª‚£∑‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä     ",
            "    ‚†Ä‚†ò‚£ø‚°ø‚†Ä‚†Ä‚£∏‚†Ä‚£∏‚°á‚†Ä‚†Ä‚¢∏‚°á‚†à‚¢∑‚£Ñ‚°Ä‚†Ä‚†Ä‚†Ä‚¢∫‚£á‚†Ä‚†ô‚¢¶‚£Ñ‚†à‚¢∑‚°π‚¢¶‚°Ä‚†à‚£∑‚†Ä‚†Ä‚†Ä‚¢∏‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†∏‚£á‚†Ä‚†Ä‚†π‚£∑‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä     ",
            "    ‚†Ä‚†Ä‚£∏‚°á‚†Ä‚†Ä‚°Ø‚¢†‚£ø‚¢ø‚°Ñ‚†Ä‚¢∏‚°á‚†Ä‚†Ä‚†à‚†õ‚†∂‚£¶‚£Ñ‚£Ä‚£π‚£ø‚°ì‚†≥‚†é‚†õ‚†≤‚†ø‚¢¶‚£Ω‚£∂‚£º‚£á‚†Ä‚†Ä‚¢∏‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢ª‚°Ñ‚†Ä‚†Ä‚¢ª‚£ß‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä     ",
            "    ‚†Ä‚¢†‚£ø‚†Ä‚†Ä‚†Ä‚°á‚£º‚†è‚†Ä‚†ª‚£Ü‚¢ò‚£ß‚£¥‚†ñ‚†ã‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚†Å‚†â‚†õ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚°Å‚†Ä‚¢∏‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚£∑‚†Ä‚†Ä‚†à‚£ø‚£á‚†Ä‚†Ä‚†Ä‚†Ä     ",
            "    ‚†Ä‚£º‚°ü‚†Ä‚†Ä‚†Ä‚£ø‚°ü‚†Ä‚†Ä‚†Ä‚†ô‚†≥‚†•‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£Ä‚£†‚£§‚£§‚£º‚°á‚†Ä‚¢∏‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢π‚°á‚†Ä‚†Ä‚°ü‚¢ø‚£Ü‚†Ä‚†Ä‚†Ä     ",
            "    ‚¢Ä‚£ø‚°á‚†Ä‚†Ä‚†Ä‚£ø‚†á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£†‚°§‚¢∂‚£æ‚£ø‚£ø‚£è‚°π‚†ø‚£á‚†Ä‚¢∏‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚£ß‚†Ä‚†Ä‚£ß‚†∏‚£ø‚°Ä‚†Ä‚†Ä     ",
            "    ‚¢∏‚£ø‚¢£‚†Ä‚†Ä‚†Ä‚£ø‚°Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£∂‚£Ø‚†µ‚†∂‚†õ‚†â‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚¢ø‚†Ä‚¢∏‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢ª‚†Ä‚†Ä‚£ø‚†Ä‚£ø‚£ß‚†Ä‚†Ä     ",
            "    ‚£∏‚°è‚¢π‚†Ä‚†Ä‚†Ä‚¢ø‚°á‚†Ä‚†Ä‚†Ä‚£†‚£§‚£∂‚£æ‚£ø‚£ª‚£ø‚°ø‚†ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚†Ä‚¢Ä‚†Ä‚£Ä‚†Ä‚¢∏‚°Ä‚¢∏‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚°Ü‚†Ä‚°ø‚¢∞‚°è‚£ø‚°Ä‚†Ä     ",
            "    ‚£ø‚°á‚¢∏‚°Ñ‚†Ä‚†Ä‚¢∏‚£ø‚¢Ä‚£¥‚£ü‚£°‚°Ω‚†ü‚†õ‚†ã‚†â‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∞‚°Ü‚†∏‚£ó‚†ª‚†ó‚†ª‚†á‚¢∏‚°á‚£∏‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚°á‚†Ä‚°á‚¢∏‚†á‚¢∏‚£ß‚†Ä     ",
            "    ‚£ø‚°Ö‚†ò‚£á‚†Ä‚†Ä‚†Ä‚£ø‚°ò‚†õ‚†â‚†Å‚†Ä‚†Ä‚†Ä‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢à‚°á‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚°á‚¢†‚£É‚°ø‚†Ä‚†Ä‚£ø‚†Ä     ",
            "    ‚£ø‚¢∑‚°Ä‚¢π‚°Ñ‚†Ä‚†Ä‚¢π‚°á‚†Ä‚†Ä‚£∏‚°Ü‚†∂‚†Ñ‚†õ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚£†‚°∂‚†É‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚£ß‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚°á‚†ò‚£º‚†É‚†Ä‚†Ä‚¢ª‚°Ñ     ",
            "    ‚£ø‚†à‚£ß‚†à‚¢∑‚†Ä‚†Ä‚†à‚£ø‚†Ä‚†Ä‚†à‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚†Ä‚†Ä‚¢Ä‚£Ä‚£§‚†¥‚†ñ‚¢ö‚£©‚†Ω‚†ã‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£∏‚†Ä‚£∞‚†è‚†Ä‚†Ä‚†Ä‚¢º‚°á     ",
            "    ‚£ø‚†Ä‚†ò‚£á‚†ò‚£ß‚†Ä‚†Ä‚¢∏‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚†õ‚†õ‚†∑‚†ñ‚†í‚†í‚†õ‚†â‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚£¥‚¢Å‚°è‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°ø‚¢∞‚†ü‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚°Ñ     ",
            "    ‚£ø‚°Ñ‚†Ä‚†ò‚£¶‚†ò‚£á‚†Ä‚†à‚£ø‚°Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£†‚£¥‚†æ‚†ã‚¢Ä‚£Ω‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢®‚°∑‚†ã‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚†Ä     ",
            "    ‚¢∏‚£ß‚†Ä‚†Ä‚†ò‚¢ß‚°ò‚¢ß‚°Ä‚†ò‚†ª‚†∂‚¢§‚£§‚£Ä‚£Ä‚£Ä‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚£Ä‚£†‚£¥‚£æ‚†ü‚†ã‚¢Ä‚£†‚†∂‚¢ª‚°è‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚†É‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£∞‚°è‚†Ä     ",
            "    ‚†Ä‚¢ø‚°Ü‚†Ä‚†Ä‚°à‚¢≥‚£Ñ‚†±‚£Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ω‚†â‚†â‚¢â‚£â‚†ô‚¢ø‚£â‚†â‚†ª‚£ø‚°ø‚†ã‚¢Ä‚£†‚†ñ‚†ã‚†Å‚†Ä‚£æ‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∞‚°ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚°ü‚†Ä‚†Ä     ",
            "    ‚†Ä‚†à‚¢ø‚°Ñ‚†ê‚£ß‚†Ä‚†ô‚¢¶‚°à‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢ª‚£Ü‚†Ä‚†Ä‚†ô‚¢¶‚£Ä‚†â‚†≥‚¢§‚£ò‚£ß‚†∂‚†ã‚†Å‚†Ä‚†Ä‚†Ä‚£∞‚°ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£†‚†ø‚†É‚†Ä‚†Ä‚†Ä‚¢Ä‚£¥‚†ü‚†Å‚†Ä‚†Ä     ",
            "    ‚†Ä‚†Ä‚†à‚¢ø‚£Ñ‚¢ø‚£ß‚°Ä‚†Ä‚†õ‚¢¶‚£Ñ‚†Ä‚†Ä‚†Ä‚¢∏‚£ø‚£∑‚£Ñ‚°Ä‚†Ä‚†â‚†≥‚†∂‚£∂‚†û‚†Å‚†Ä‚†Ä‚†Ä‚¢Ä‚£†‚£æ‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚£¥‚°è‚†Å‚†Ä‚†Ä‚¢Ä‚£†‚°¥‚†ü‚†Å‚†Ä‚†Ä‚†Ä‚†Ä     ",
            "    ‚†Ä‚†Ä‚†Ä‚†Ä‚†ª‚£æ‚£ø‚£õ‚£¶‚£Ñ‚†Ä‚†à‚†õ‚†≤‚†¶‚£Ñ‚£ø‚°á‚†à‚†ô‚†õ‚†∂‚†∂‚¢∂‚£ø‚†Ä‚†Ä‚†Ä‚¢Ä‚£¥‚£ø‚£ø‚£ø‚£Ø‚£Ä‚£Ä‚£§‚£§‚£∂‚£ø‚£ø‚£ø‚£ø‚°õ‚†õ‚†ã‚†â‚†â‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä     ",
            "    ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚£ª‚£∑‚£Ñ‚£ô‚°õ‚†∂‚†¶‚£§‚£§‚£Ñ‚£∏‚£∑‚°Ñ‚†Ä‚†Ä‚†Ä‚¢†‚†è‚£ª‚†Ä‚£†‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†õ‚£ø‚£ø‚£ø‚£ø‚£∑‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä     ",
          },
        },
      })
    end,
  },
  {
    'kevinhwang91/nvim-hlslens',
    lazy = true,
    keys = { '/', '?' },
    config = function()
      require('hlslens').setup({
        override_lens = function(render, posList, nearest, idx, relIdx)
          local sfw = vim.v.searchforward == 1
          local indicator, text, chunks
          local absRelIdx = math.abs(relIdx)
          if absRelIdx > 1 then
            indicator = ('%d%s'):format(absRelIdx, sfw ~= (relIdx > 1) and 'ÔÅ¢' or 'ÔÅ£')
          elseif absRelIdx == 1 then
            indicator = sfw ~= (relIdx == 1) and 'ÔÅ¢' or 'ÔÅ£'
          else
            indicator = ''
          end

          local lnum, col = unpack(posList[idx])
          if nearest then
            local cnt = #posList
            if indicator ~= '' then
              text = ('[%s %d/%d]'):format(indicator, idx, cnt)
            else
              text = ('[%d/%d]'):format(idx, cnt)
            end
            chunks = { { ' ', 'Ignore' }, { text, 'HlSearchLensNear' } }
          else
            text = ('[%s %d]'):format(indicator, idx)
            chunks = { { ' ', 'Ignore' }, { text, 'HlSearchLens' } }
          end
          render.setVirt(0, lnum - 1, col - 1, chunks, nearest)
        end
      })
    end
  },
  {
    'nvim-tree/nvim-web-devicons',
    lazy = true,
  },
}
